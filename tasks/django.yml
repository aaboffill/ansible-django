---
- name: Ensure packages needed for Django are present
  apt: name={{ item }} state=latest
  with_items:
    - libjpeg-dev # pillow
    - libpng12-dev # pillow
    - gettext

- name: Ensure py2 packages needed for Django are present
  apt: name={{ item }} state=latest
  with_items:
    - python-dev
    - python-virtualenv
  when: not django_ispython3

- name: Ensure py3 packages needed for Django are present
  apt: name={{ item }} state=latest
  with_items:
    - python3-dev
    - python3-venv
  when: django_ispython3

- name: Ensure required folders are there
  file: path={{ item }} state=directory owner={{ django_user }}
  with_items:
    - "{{ django_path }}"
    - "{{ django_static_path }}"
    - "{{ django_media_path }}"

# Every django project has easy-to-use dumpdb/restoredb scripts placed in django_path
- name: Ensure that we have a dumpdb/restpredb scripts
  template:
    src: "{{ item }}_{{ django_dbtype}}.sh"
    dest: "{{ django_path }}/{{ item }}.sh"
    owner: "{{ django_user }}"
    mode: u=rwx,g=,o=
  with_items:
    - dumpdb
    - restoredb

- name: Initial restore DB/media from backup if needed
  shell: "{{ django_initial_data_restore_script }}"
  become: yes
  become_user: "{{ django_user }}"
  when: django_provide_initial_data and is_database_empty

- include: srcsync.yml
- block:
  - name: Create a virtualenv (py3) for django
    command: "/usr/bin/python3 -m venv --system-site-packages {{ django_env }} creates={{ django_env }}"
    when: django_ispython3

  - name: Create a virtualenv (py2) for django
    command: "virtualenv {{ django_env }} --system-site-packages creates={{ django_env }}"
    when: not django_ispython3

  - name: Install django requirements
    command: "{{ django_env }}/bin/pip install -r {{ django_requirements_file }}"
    register: pip_install_result
    changed_when: "'Successfully installed' in pip_install_result.stdout"

  - name: Create local_settings.py
    template: src=local_settings.py dest={{ django_path }}/local_settings.py
    register: local_settings_config

  - name: Symlink local_settings.py into our venv's site-packages
    file:
      path: "{{ django_sitepackages_path }}/local_settings.py"
      state: link
      src: "{{ django_path }}/local_settings.py"

  - name: Migrate
    django_manage:
      app_path: "{{ django_src_path }}"
      command: migrate
      virtualenv: "{{ django_env }}"

  - name: Load fixtures
    django_manage:
      app_path: "{{ django_src_path }}"
      command: "loaddata {{ item }}"
      virtualenv: "{{ django_env }}"
    with_items: "{{ django_fixtures_to_load }}"

  - name: Collect static
    django_manage:
      app_path: "{{ django_src_path }}"
      command: collectstatic
      # When we're in production, collected static files have a different access model then the
      # rest of the project, so we don't want to symlink it. However, when we're in development
      # mode, we prefer to be able to quickly see the result of our static files, so we want to
      # symlink it.
      link: "{{ django_debug }}"
      virtualenv: "{{ django_env }}"
    changed_when: false
  become: yes
  become_user: "{{ django_user }}"

# static/media need to be accessible by nginx
- name: Fix static/media paths permissions
  file:
      path: "{{ item }}"
      state: directory
      group: www-data
      recurse: yes
      mode: "u=rwX,g=rX,o=" # X != x, remember
  changed_when: false
  with_items:
    - "{{ django_static_path }}"
    - "{{ django_media_path }}"

- set_fact:
    django_needs_restart: "{{ pip_install_result|changed or local_settings_config|changed }}"

